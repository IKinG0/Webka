# main.py
import asyncio
import time
import os
import logging
from collections import Counter

try:
    from config import (
        MIN_CONTOUR_AREA, FRAME_WIDTH, FRAME_HEIGHT,
        TELEGRAM_BOT_TOKEN, ALLOWED_USER_IDS,
        PHOTO_COOLDOWN_PERIOD, VIDEO_FPS,
        VIDEO_NO_MOTION_STOP_DELAY, SCREENSHOT_DIR, VIDEO_RECORD_PATH
    )
    from bot_handler import bot_state
except ModuleNotFoundError as e:
    print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –≤ main.py: {e}. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ –∏ PYTHONPATH –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")
    exit(1)

from motion_detection import MotionDetector
from image_processing import ObjectIdentifier
from bot_handler import start_bot_polling as start_telegram_bot, broadcast_alert

logger = logging.getLogger(__name__)


def format_detected_objects(detected_list):
    if not detected_list or detected_list == ["–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç"] or detected_list == ["–æ—à–∏–±–∫–∞ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"]:
        return "–û–±—ä–µ–∫—Ç—ã –Ω–µ –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω—ã."

    counts = Counter(detected_list)
    parts = []
    for item, count in counts.items():
        parts.append(f"{item}: {count}")
    return "–í –∫–∞–¥—Ä–µ: " + ", ".join(parts) + "."


async def main_loop():
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ç–µ–∫—Ü–∏–∏...")
    if not os.path.exists(SCREENSHOT_DIR):
        os.makedirs(SCREENSHOT_DIR, exist_ok=True)
    if not os.path.exists(VIDEO_RECORD_PATH):
        os.makedirs(VIDEO_RECORD_PATH, exist_ok=True)

    detector = MotionDetector(min_area=MIN_CONTOUR_AREA, frame_width=FRAME_WIDTH, frame_height=FRAME_HEIGHT)
    identifier = ObjectIdentifier()

    if not detector.start_capture(camera_index=0):
        logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –¥–µ—Ç–µ–∫—Ç–æ—Ä –¥–≤–∏–∂–µ–Ω–∏—è.")
        return

    logger.info("–°–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–µ–∫—Ü–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –∑–∞–ø—É—â–µ–Ω–∞.")

    last_photo_alert_time = 0
    is_video_recording = False
    current_video_filename = None
    last_motion_time_video = 0
    initial_objects_for_video_caption = []

    try:
        while True:
            if not bot_state.monitoring_active:
                await asyncio.sleep(1)
                if is_video_recording:  # –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–∏–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
                    detector.stop_video_recording()
                    logger.info(f"–ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ {current_video_filename} –ø—Ä–µ—Ä–≤–∞–Ω–∞ –∏–∑-–∑–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.")
                    # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ–∑–∞–∫–æ–Ω—á–µ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å
                    # os.remove(current_video_filename) # –µ—Å–ª–∏ –Ω–µ —Ö–æ—Ç–∏–º –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
                    is_video_recording = False
                    current_video_filename = None
                continue

            frame_with_motion = detector.detect_motion()
            current_time = time.time()

            if bot_state.current_mode == "photo":
                if is_video_recording:  # –ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å —Å –≤–∏–¥–µ–æ –Ω–∞ —Ñ–æ—Ç–æ –≤–æ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
                    detector.stop_video_recording()
                    logger.info(f"–ó–∞–ø–∏—Å—å –≤–∏–¥–µ–æ {current_video_filename} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏–∑-–∑–∞ —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞ –Ω–∞ —Ñ–æ—Ç–æ.")
                    # –†–µ—à–∞–µ–º, –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–∏ –µ–≥–æ
                    # await broadcast_alert(f"–í–∏–¥–µ–æ–∑–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {format_detected_objects(initial_objects_for_video_caption)}", current_video_filename, "video")
                    is_video_recording = False
                    current_video_filename = None

                if frame_with_motion is not None:
                    if (current_time - last_photo_alert_time) > PHOTO_COOLDOWN_PERIOD:
                        logger.info("–§–æ—Ç–æ —Ä–µ–∂–∏–º: –î–≤–∏–∂–µ–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ!")
                        screenshot_path = detector.capture_screenshot(frame_with_motion, directory=SCREENSHOT_DIR)
                        if screenshot_path:
                            detected_objects_list = identifier.identify_objects(screenshot_path)
                            caption = f"üö® –§–æ—Ç–æ: {format_detected_objects(detected_objects_list)}"
                            await broadcast_alert(caption, screenshot_path, "photo")
                            last_photo_alert_time = current_time
                        else:
                            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.")
                else:  # –ù–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è –≤ —Ñ–æ—Ç–æ —Ä–µ–∂–∏–º–µ
                    pass  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º


            elif bot_state.current_mode == "video":
                if frame_with_motion is not None:
                    last_motion_time_video = current_time
                    if not is_video_recording:
                        current_video_filename = detector.start_video_recording(directory=VIDEO_RECORD_PATH,
                                                                                fps=VIDEO_FPS)
                        if current_video_filename:
                            is_video_recording = True
                            # –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç—ã –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –Ω–∞—á–∞–ª–µ –∑–∞–ø–∏—Å–∏
                            temp_shot_for_caption = detector.capture_screenshot(frame_with_motion,
                                                                                SCREENSHOT_DIR)  # –í—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞–¥—Ä –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                            if temp_shot_for_caption:
                                initial_objects_for_video_caption = identifier.identify_objects(temp_shot_for_caption)
                                os.remove(temp_shot_for_caption)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –∫–∞–¥—Ä
                            else:
                                initial_objects_for_video_caption = ["–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–∫—Ç—ã"]

                            caption_start = f"üìπ –ù–∞—á–∞–ª–∞—Å—å –≤–∏–¥–µ–æ–∑–∞–ø–∏—Å—å: {format_detected_objects(initial_objects_for_video_caption)}"
                            await broadcast_alert(caption_start)  # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –±–µ–∑ —Ñ–∞–π–ª–∞
                            logger.info(f"–í–∏–¥–µ–æ —Ä–µ–∂–∏–º: –ù–∞—á–∞—Ç–∞ –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ {current_video_filename}")
                        else:
                            logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –≤–∏–¥–µ–æ.")

                    if is_video_recording:
                        detector.write_video_frame(frame_with_motion)

                elif is_video_recording:  # –î–≤–∏–∂–µ–Ω–∏—è –Ω–µ—Ç, –Ω–æ –∑–∞–ø–∏—Å—å –∏–¥–µ—Ç
                    if (current_time - last_motion_time_video) > VIDEO_NO_MOTION_STOP_DELAY:
                        logger.info(
                            f"–í–∏–¥–µ–æ —Ä–µ–∂–∏–º: –ù–µ—Ç –¥–≤–∏–∂–µ–Ω–∏—è –≤ —Ç–µ—á–µ–Ω–∏–µ {VIDEO_NO_MOTION_STOP_DELAY} —Å–µ–∫. –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–ø–∏—Å–∏.")
                        video_path = detector.stop_video_recording()
                        if video_path:
                            caption_end = f"üìπ –í–∏–¥–µ–æ–∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {format_detected_objects(initial_objects_for_video_caption)}"
                            await broadcast_alert(caption_end, video_path, "video")
                        is_video_recording = False
                        current_video_filename = None
                        initial_objects_for_video_caption = []

            await asyncio.sleep(0.05)  # –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è –±–æ–ª–µ–µ –ø–ª–∞–≤–Ω–æ–π –∑–∞–ø–∏—Å–∏ –≤–∏–¥–µ–æ

    except KeyboardInterrupt:
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    except Exception as e:
        logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤ –≥–ª–∞–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", exc_info=True)
    finally:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞...")
        if is_video_recording and detector.video_writer:  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–∏–ª–æ—Å—å –ø—Ä–∏ —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–º –≤—ã—Ö–æ–¥–µ
            path = detector.stop_video_recording()
            logger.info(f"–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤–∏–¥–µ–æ: {path}")
        detector.stop_capture()
        logger.info("–î–µ—Ç–µ–∫—Ç–æ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


async def main_app_entrypoint():
    logger.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    telegram_task = asyncio.create_task(start_telegram_bot())
    main_loop_task = asyncio.create_task(main_loop())

    try:
        done, pending = await asyncio.wait(
            [telegram_task, main_loop_task],
            return_when=asyncio.FIRST_COMPLETED,
        )
        for task in pending:
            task.cancel()
        for task in done:
            if task.exception():
                logger.error(f"–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–æ–π: {task.exception()}", exc_info=task.exception())
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ asyncio.wait: {e}", exc_info=True)
    finally:
        if not telegram_task.done(): telegram_task.cancel()
        if not main_loop_task.done(): main_loop_task.cancel()
        await asyncio.gather(telegram_task, main_loop_task, return_exceptions=True)
        logger.info("–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É.")


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(levelname)s - %(name)s - [%(module)s.%(funcName)s:%(lineno)d] - %(message)s",
        handlers=[logging.StreamHandler()]
    )
    logging.getLogger("httpx").setLevel(logging.WARNING)
    logging.getLogger("httpcore").setLevel(logging.WARNING)

    valid_config = True
    if not TELEGRAM_BOT_TOKEN or TELEGRAM_BOT_TOKEN == "YOUR_TELEGRAM_BOT_TOKEN":
        logger.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        valid_config = False
    if not ALLOWED_USER_IDS or 123456789 in ALLOWED_USER_IDS:
        logger.warning("–í–ù–ò–ú–ê–ù–ò–ï: –°–ø–∏—Å–æ–∫ ALLOWED_USER_IDS –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã.")
    if not valid_config: exit(1)

    try:
        asyncio.run(main_app_entrypoint())
    except KeyboardInterrupt:
        logger.info("–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (Ctrl+C).")
    except Exception as e:
        logger.critical(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)
